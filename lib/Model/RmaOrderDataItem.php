<?php
/**
 * RmaOrderDataItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RMA Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RmaOrderDataItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RmaOrderDataItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static $withAdditionalProperties = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'rmaOrderDataItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'product_grn' => 'string',
        'qty_ordered' => 'int',
        'qty_committed' => 'int',
        'qty_shipped' => 'int',
        'unit_sale_price' => '\OpenAPI\Client\Model\RmaMoney',
        'unit_list_price' => '\OpenAPI\Client\Model\RmaMoney',
        'unit_vat_amount' => '\OpenAPI\Client\Model\RmaMoney',
        'row_sale_price' => '\OpenAPI\Client\Model\RmaMoney',
        'row_list_price' => '\OpenAPI\Client\Model\RmaMoney',
        'row_vat_amount' => '\OpenAPI\Client\Model\RmaMoney',
        'vat_percentage' => 'float',
        'vat_inaccurate' => 'bool',
        'vat_calculated' => 'bool',
        'product_name' => 'string',
        'product_code' => 'string',
        'product_sku' => 'string',
        'product_options' => 'string',
        'product_img' => 'string',
        'product_data' => 'string',
        'shipment_info_reference' => 'string',
        'promotion_grn' => 'string[]',
        'product_is_virtual' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'product_grn' => null,
        'qty_ordered' => 'int64',
        'qty_committed' => 'int64',
        'qty_shipped' => 'int64',
        'unit_sale_price' => null,
        'unit_list_price' => null,
        'unit_vat_amount' => null,
        'row_sale_price' => null,
        'row_list_price' => null,
        'row_vat_amount' => null,
        'vat_percentage' => 'float',
        'vat_inaccurate' => null,
        'vat_calculated' => null,
        'product_name' => null,
        'product_code' => null,
        'product_sku' => null,
        'product_options' => null,
        'product_img' => null,
        'product_data' => null,
        'shipment_info_reference' => null,
        'promotion_grn' => null,
        'product_is_virtual' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'product_grn' => false,
        'qty_ordered' => false,
        'qty_committed' => false,
        'qty_shipped' => false,
        'unit_sale_price' => false,
        'unit_list_price' => false,
        'unit_vat_amount' => false,
        'row_sale_price' => false,
        'row_list_price' => false,
        'row_vat_amount' => false,
        'vat_percentage' => false,
        'vat_inaccurate' => false,
        'vat_calculated' => false,
        'product_name' => false,
        'product_code' => false,
        'product_sku' => false,
        'product_options' => false,
        'product_img' => false,
        'product_data' => false,
        'shipment_info_reference' => false,
        'promotion_grn' => false,
        'product_is_virtual' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product_grn' => 'productGrn',
        'qty_ordered' => 'qtyOrdered',
        'qty_committed' => 'qtyCommitted',
        'qty_shipped' => 'qtyShipped',
        'unit_sale_price' => 'unitSalePrice',
        'unit_list_price' => 'unitListPrice',
        'unit_vat_amount' => 'unitVatAmount',
        'row_sale_price' => 'rowSalePrice',
        'row_list_price' => 'rowListPrice',
        'row_vat_amount' => 'rowVatAmount',
        'vat_percentage' => 'vatPercentage',
        'vat_inaccurate' => 'vatInaccurate',
        'vat_calculated' => 'vatCalculated',
        'product_name' => 'productName',
        'product_code' => 'productCode',
        'product_sku' => 'productSku',
        'product_options' => 'productOptions',
        'product_img' => 'productImg',
        'product_data' => 'productData',
        'shipment_info_reference' => 'shipmentInfoReference',
        'promotion_grn' => 'promotionGrn',
        'product_is_virtual' => 'productIsVirtual'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product_grn' => 'setProductGrn',
        'qty_ordered' => 'setQtyOrdered',
        'qty_committed' => 'setQtyCommitted',
        'qty_shipped' => 'setQtyShipped',
        'unit_sale_price' => 'setUnitSalePrice',
        'unit_list_price' => 'setUnitListPrice',
        'unit_vat_amount' => 'setUnitVatAmount',
        'row_sale_price' => 'setRowSalePrice',
        'row_list_price' => 'setRowListPrice',
        'row_vat_amount' => 'setRowVatAmount',
        'vat_percentage' => 'setVatPercentage',
        'vat_inaccurate' => 'setVatInaccurate',
        'vat_calculated' => 'setVatCalculated',
        'product_name' => 'setProductName',
        'product_code' => 'setProductCode',
        'product_sku' => 'setProductSku',
        'product_options' => 'setProductOptions',
        'product_img' => 'setProductImg',
        'product_data' => 'setProductData',
        'shipment_info_reference' => 'setShipmentInfoReference',
        'promotion_grn' => 'setPromotionGrn',
        'product_is_virtual' => 'setProductIsVirtual'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product_grn' => 'getProductGrn',
        'qty_ordered' => 'getQtyOrdered',
        'qty_committed' => 'getQtyCommitted',
        'qty_shipped' => 'getQtyShipped',
        'unit_sale_price' => 'getUnitSalePrice',
        'unit_list_price' => 'getUnitListPrice',
        'unit_vat_amount' => 'getUnitVatAmount',
        'row_sale_price' => 'getRowSalePrice',
        'row_list_price' => 'getRowListPrice',
        'row_vat_amount' => 'getRowVatAmount',
        'vat_percentage' => 'getVatPercentage',
        'vat_inaccurate' => 'getVatInaccurate',
        'vat_calculated' => 'getVatCalculated',
        'product_name' => 'getProductName',
        'product_code' => 'getProductCode',
        'product_sku' => 'getProductSku',
        'product_options' => 'getProductOptions',
        'product_img' => 'getProductImg',
        'product_data' => 'getProductData',
        'shipment_info_reference' => 'getShipmentInfoReference',
        'promotion_grn' => 'getPromotionGrn',
        'product_is_virtual' => 'getProductIsVirtual'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Associative array for storing additional properties
     *
     * @var mixed[]
     */
    protected $additionalProperties = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('product_grn', $data ?? [], null);
        $this->setIfExists('qty_ordered', $data ?? [], null);
        $this->setIfExists('qty_committed', $data ?? [], null);
        $this->setIfExists('qty_shipped', $data ?? [], null);
        $this->setIfExists('unit_sale_price', $data ?? [], null);
        $this->setIfExists('unit_list_price', $data ?? [], null);
        $this->setIfExists('unit_vat_amount', $data ?? [], null);
        $this->setIfExists('row_sale_price', $data ?? [], null);
        $this->setIfExists('row_list_price', $data ?? [], null);
        $this->setIfExists('row_vat_amount', $data ?? [], null);
        $this->setIfExists('vat_percentage', $data ?? [], null);
        $this->setIfExists('vat_inaccurate', $data ?? [], null);
        $this->setIfExists('vat_calculated', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('product_code', $data ?? [], null);
        $this->setIfExists('product_sku', $data ?? [], null);
        $this->setIfExists('product_options', $data ?? [], null);
        $this->setIfExists('product_img', $data ?? [], null);
        $this->setIfExists('product_data', $data ?? [], null);
        $this->setIfExists('shipment_info_reference', $data ?? [], null);
        $this->setIfExists('promotion_grn', $data ?? [], null);
        $this->setIfExists('product_is_virtual', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_grn
     *
     * @return string|null
     */
    public function getProductGrn()
    {
        return $this->container['product_grn'];
    }

    /**
     * Sets product_grn
     *
     * @param string|null $product_grn product_grn
     *
     * @return self
     */
    public function setProductGrn($product_grn)
    {
        if (is_null($product_grn)) {
            throw new \InvalidArgumentException('non-nullable product_grn cannot be null');
        }
        $this->container['product_grn'] = $product_grn;

        return $this;
    }

    /**
     * Gets qty_ordered
     *
     * @return int|null
     */
    public function getQtyOrdered()
    {
        return $this->container['qty_ordered'];
    }

    /**
     * Sets qty_ordered
     *
     * @param int|null $qty_ordered qty_ordered
     *
     * @return self
     */
    public function setQtyOrdered($qty_ordered)
    {
        if (is_null($qty_ordered)) {
            throw new \InvalidArgumentException('non-nullable qty_ordered cannot be null');
        }
        $this->container['qty_ordered'] = $qty_ordered;

        return $this;
    }

    /**
     * Gets qty_committed
     *
     * @return int|null
     */
    public function getQtyCommitted()
    {
        return $this->container['qty_committed'];
    }

    /**
     * Sets qty_committed
     *
     * @param int|null $qty_committed qty_committed
     *
     * @return self
     */
    public function setQtyCommitted($qty_committed)
    {
        if (is_null($qty_committed)) {
            throw new \InvalidArgumentException('non-nullable qty_committed cannot be null');
        }
        $this->container['qty_committed'] = $qty_committed;

        return $this;
    }

    /**
     * Gets qty_shipped
     *
     * @return int|null
     */
    public function getQtyShipped()
    {
        return $this->container['qty_shipped'];
    }

    /**
     * Sets qty_shipped
     *
     * @param int|null $qty_shipped qty_shipped
     *
     * @return self
     */
    public function setQtyShipped($qty_shipped)
    {
        if (is_null($qty_shipped)) {
            throw new \InvalidArgumentException('non-nullable qty_shipped cannot be null');
        }
        $this->container['qty_shipped'] = $qty_shipped;

        return $this;
    }

    /**
     * Gets unit_sale_price
     *
     * @return \OpenAPI\Client\Model\RmaMoney|null
     */
    public function getUnitSalePrice()
    {
        return $this->container['unit_sale_price'];
    }

    /**
     * Sets unit_sale_price
     *
     * @param \OpenAPI\Client\Model\RmaMoney|null $unit_sale_price unit_sale_price
     *
     * @return self
     */
    public function setUnitSalePrice($unit_sale_price)
    {
        if (is_null($unit_sale_price)) {
            throw new \InvalidArgumentException('non-nullable unit_sale_price cannot be null');
        }
        $this->container['unit_sale_price'] = $unit_sale_price;

        return $this;
    }

    /**
     * Gets unit_list_price
     *
     * @return \OpenAPI\Client\Model\RmaMoney|null
     */
    public function getUnitListPrice()
    {
        return $this->container['unit_list_price'];
    }

    /**
     * Sets unit_list_price
     *
     * @param \OpenAPI\Client\Model\RmaMoney|null $unit_list_price unit_list_price
     *
     * @return self
     */
    public function setUnitListPrice($unit_list_price)
    {
        if (is_null($unit_list_price)) {
            throw new \InvalidArgumentException('non-nullable unit_list_price cannot be null');
        }
        $this->container['unit_list_price'] = $unit_list_price;

        return $this;
    }

    /**
     * Gets unit_vat_amount
     *
     * @return \OpenAPI\Client\Model\RmaMoney|null
     */
    public function getUnitVatAmount()
    {
        return $this->container['unit_vat_amount'];
    }

    /**
     * Sets unit_vat_amount
     *
     * @param \OpenAPI\Client\Model\RmaMoney|null $unit_vat_amount unit_vat_amount
     *
     * @return self
     */
    public function setUnitVatAmount($unit_vat_amount)
    {
        if (is_null($unit_vat_amount)) {
            throw new \InvalidArgumentException('non-nullable unit_vat_amount cannot be null');
        }
        $this->container['unit_vat_amount'] = $unit_vat_amount;

        return $this;
    }

    /**
     * Gets row_sale_price
     *
     * @return \OpenAPI\Client\Model\RmaMoney|null
     */
    public function getRowSalePrice()
    {
        return $this->container['row_sale_price'];
    }

    /**
     * Sets row_sale_price
     *
     * @param \OpenAPI\Client\Model\RmaMoney|null $row_sale_price row_sale_price
     *
     * @return self
     */
    public function setRowSalePrice($row_sale_price)
    {
        if (is_null($row_sale_price)) {
            throw new \InvalidArgumentException('non-nullable row_sale_price cannot be null');
        }
        $this->container['row_sale_price'] = $row_sale_price;

        return $this;
    }

    /**
     * Gets row_list_price
     *
     * @return \OpenAPI\Client\Model\RmaMoney|null
     */
    public function getRowListPrice()
    {
        return $this->container['row_list_price'];
    }

    /**
     * Sets row_list_price
     *
     * @param \OpenAPI\Client\Model\RmaMoney|null $row_list_price row_list_price
     *
     * @return self
     */
    public function setRowListPrice($row_list_price)
    {
        if (is_null($row_list_price)) {
            throw new \InvalidArgumentException('non-nullable row_list_price cannot be null');
        }
        $this->container['row_list_price'] = $row_list_price;

        return $this;
    }

    /**
     * Gets row_vat_amount
     *
     * @return \OpenAPI\Client\Model\RmaMoney|null
     */
    public function getRowVatAmount()
    {
        return $this->container['row_vat_amount'];
    }

    /**
     * Sets row_vat_amount
     *
     * @param \OpenAPI\Client\Model\RmaMoney|null $row_vat_amount row_vat_amount
     *
     * @return self
     */
    public function setRowVatAmount($row_vat_amount)
    {
        if (is_null($row_vat_amount)) {
            throw new \InvalidArgumentException('non-nullable row_vat_amount cannot be null');
        }
        $this->container['row_vat_amount'] = $row_vat_amount;

        return $this;
    }

    /**
     * Gets vat_percentage
     *
     * @return float|null
     */
    public function getVatPercentage()
    {
        return $this->container['vat_percentage'];
    }

    /**
     * Sets vat_percentage
     *
     * @param float|null $vat_percentage vat_percentage
     *
     * @return self
     */
    public function setVatPercentage($vat_percentage)
    {
        if (is_null($vat_percentage)) {
            throw new \InvalidArgumentException('non-nullable vat_percentage cannot be null');
        }
        $this->container['vat_percentage'] = $vat_percentage;

        return $this;
    }

    /**
     * Gets vat_inaccurate
     *
     * @return bool|null
     */
    public function getVatInaccurate()
    {
        return $this->container['vat_inaccurate'];
    }

    /**
     * Sets vat_inaccurate
     *
     * @param bool|null $vat_inaccurate vat_inaccurate
     *
     * @return self
     */
    public function setVatInaccurate($vat_inaccurate)
    {
        if (is_null($vat_inaccurate)) {
            throw new \InvalidArgumentException('non-nullable vat_inaccurate cannot be null');
        }
        $this->container['vat_inaccurate'] = $vat_inaccurate;

        return $this;
    }

    /**
     * Gets vat_calculated
     *
     * @return bool|null
     */
    public function getVatCalculated()
    {
        return $this->container['vat_calculated'];
    }

    /**
     * Sets vat_calculated
     *
     * @param bool|null $vat_calculated vat_calculated
     *
     * @return self
     */
    public function setVatCalculated($vat_calculated)
    {
        if (is_null($vat_calculated)) {
            throw new \InvalidArgumentException('non-nullable vat_calculated cannot be null');
        }
        $this->container['vat_calculated'] = $vat_calculated;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name product_name
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            throw new \InvalidArgumentException('non-nullable product_name cannot be null');
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code product_code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (is_null($product_code)) {
            throw new \InvalidArgumentException('non-nullable product_code cannot be null');
        }
        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets product_sku
     *
     * @return string|null
     */
    public function getProductSku()
    {
        return $this->container['product_sku'];
    }

    /**
     * Sets product_sku
     *
     * @param string|null $product_sku product_sku
     *
     * @return self
     */
    public function setProductSku($product_sku)
    {
        if (is_null($product_sku)) {
            throw new \InvalidArgumentException('non-nullable product_sku cannot be null');
        }
        $this->container['product_sku'] = $product_sku;

        return $this;
    }

    /**
     * Gets product_options
     *
     * @return string|null
     */
    public function getProductOptions()
    {
        return $this->container['product_options'];
    }

    /**
     * Sets product_options
     *
     * @param string|null $product_options product_options
     *
     * @return self
     */
    public function setProductOptions($product_options)
    {
        if (is_null($product_options)) {
            throw new \InvalidArgumentException('non-nullable product_options cannot be null');
        }
        $this->container['product_options'] = $product_options;

        return $this;
    }

    /**
     * Gets product_img
     *
     * @return string|null
     */
    public function getProductImg()
    {
        return $this->container['product_img'];
    }

    /**
     * Sets product_img
     *
     * @param string|null $product_img product_img
     *
     * @return self
     */
    public function setProductImg($product_img)
    {
        if (is_null($product_img)) {
            throw new \InvalidArgumentException('non-nullable product_img cannot be null');
        }
        $this->container['product_img'] = $product_img;

        return $this;
    }

    /**
     * Gets product_data
     *
     * @return string|null
     */
    public function getProductData()
    {
        return $this->container['product_data'];
    }

    /**
     * Sets product_data
     *
     * @param string|null $product_data product_data
     *
     * @return self
     */
    public function setProductData($product_data)
    {
        if (is_null($product_data)) {
            throw new \InvalidArgumentException('non-nullable product_data cannot be null');
        }
        $this->container['product_data'] = $product_data;

        return $this;
    }

    /**
     * Gets shipment_info_reference
     *
     * @return string|null
     */
    public function getShipmentInfoReference()
    {
        return $this->container['shipment_info_reference'];
    }

    /**
     * Sets shipment_info_reference
     *
     * @param string|null $shipment_info_reference shipment_info_reference
     *
     * @return self
     */
    public function setShipmentInfoReference($shipment_info_reference)
    {
        if (is_null($shipment_info_reference)) {
            throw new \InvalidArgumentException('non-nullable shipment_info_reference cannot be null');
        }
        $this->container['shipment_info_reference'] = $shipment_info_reference;

        return $this;
    }

    /**
     * Gets promotion_grn
     *
     * @return string[]|null
     */
    public function getPromotionGrn()
    {
        return $this->container['promotion_grn'];
    }

    /**
     * Sets promotion_grn
     *
     * @param string[]|null $promotion_grn promotion_grn
     *
     * @return self
     */
    public function setPromotionGrn($promotion_grn)
    {
        if (is_null($promotion_grn)) {
            throw new \InvalidArgumentException('non-nullable promotion_grn cannot be null');
        }
        $this->container['promotion_grn'] = $promotion_grn;

        return $this;
    }

    /**
     * Gets product_is_virtual
     *
     * @return bool|null
     */
    public function getProductIsVirtual()
    {
        return $this->container['product_is_virtual'];
    }

    /**
     * Sets product_is_virtual
     *
     * @param bool|null $product_is_virtual product_is_virtual
     *
     * @return self
     */
    public function setProductIsVirtual($product_is_virtual)
    {
        if (is_null($product_is_virtual)) {
            throw new \InvalidArgumentException('non-nullable product_is_virtual cannot be null');
        }
        $this->container['product_is_virtual'] = $product_is_virtual;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    public static function withAdditionalProperties(): bool
    {
        return self::$withAdditionalProperties;
    }


    public function setAdditionalProperty($name, $value)
    {
        throw new \InvalidArgumentException(
            sprintf(
                "This model cannot have additional properties"
            )
        );
    }

    public function getAdditionalProperty($name)
    {
        return $this->additionalProperties[$name];
    }

    public function hasAdditionalProperty($name): bool
    {
        return array_key_exists($name, $this->additionalProperties);
    }

    public function getAdditionalProperties()
    {
        return $this->additionalProperties;
    }
}


