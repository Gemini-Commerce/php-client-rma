<?php
/**
 * RmaCreateReturnRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RMA Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RmaCreateReturnRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RmaCreateReturnRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static $withAdditionalProperties = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'rmaCreateReturnRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tenant_id' => 'string',
        'order_grn' => 'string',
        'products' => '\OpenAPI\Client\Model\CreateReturnRequestProduct[]',
        'preferred_refund_method' => '\OpenAPI\Client\Model\RmaRefundMethod',
        'refund_shipping_cost' => 'bool',
        'refund_payment_cost' => 'bool',
        'customer_info' => '\OpenAPI\Client\Model\RmaCustomerInfo',
        'return_address' => '\OpenAPI\Client\Model\RmaPostalAddress',
        'note' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tenant_id' => null,
        'order_grn' => null,
        'products' => null,
        'preferred_refund_method' => null,
        'refund_shipping_cost' => null,
        'refund_payment_cost' => null,
        'customer_info' => null,
        'return_address' => null,
        'note' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tenant_id' => false,
        'order_grn' => false,
        'products' => false,
        'preferred_refund_method' => false,
        'refund_shipping_cost' => false,
        'refund_payment_cost' => false,
        'customer_info' => false,
        'return_address' => false,
        'note' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tenant_id' => 'tenantId',
        'order_grn' => 'orderGrn',
        'products' => 'products',
        'preferred_refund_method' => 'preferredRefundMethod',
        'refund_shipping_cost' => 'refundShippingCost',
        'refund_payment_cost' => 'refundPaymentCost',
        'customer_info' => 'customerInfo',
        'return_address' => 'returnAddress',
        'note' => 'note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tenant_id' => 'setTenantId',
        'order_grn' => 'setOrderGrn',
        'products' => 'setProducts',
        'preferred_refund_method' => 'setPreferredRefundMethod',
        'refund_shipping_cost' => 'setRefundShippingCost',
        'refund_payment_cost' => 'setRefundPaymentCost',
        'customer_info' => 'setCustomerInfo',
        'return_address' => 'setReturnAddress',
        'note' => 'setNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tenant_id' => 'getTenantId',
        'order_grn' => 'getOrderGrn',
        'products' => 'getProducts',
        'preferred_refund_method' => 'getPreferredRefundMethod',
        'refund_shipping_cost' => 'getRefundShippingCost',
        'refund_payment_cost' => 'getRefundPaymentCost',
        'customer_info' => 'getCustomerInfo',
        'return_address' => 'getReturnAddress',
        'note' => 'getNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Associative array for storing additional properties
     *
     * @var mixed[]
     */
    protected $additionalProperties = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('order_grn', $data ?? [], null);
        $this->setIfExists('products', $data ?? [], null);
        $this->setIfExists('preferred_refund_method', $data ?? [], null);
        $this->setIfExists('refund_shipping_cost', $data ?? [], null);
        $this->setIfExists('refund_payment_cost', $data ?? [], null);
        $this->setIfExists('customer_info', $data ?? [], null);
        $this->setIfExists('return_address', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['tenant_id'] === null) {
            $invalidProperties[] = "'tenant_id' can't be null";
        }
        if ($this->container['order_grn'] === null) {
            $invalidProperties[] = "'order_grn' can't be null";
        }
        if ($this->container['products'] === null) {
            $invalidProperties[] = "'products' can't be null";
        }
        if ($this->container['preferred_refund_method'] === null) {
            $invalidProperties[] = "'preferred_refund_method' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets order_grn
     *
     * @return string
     */
    public function getOrderGrn()
    {
        return $this->container['order_grn'];
    }

    /**
     * Sets order_grn
     *
     * @param string $order_grn order_grn
     *
     * @return self
     */
    public function setOrderGrn($order_grn)
    {
        if (is_null($order_grn)) {
            throw new \InvalidArgumentException('non-nullable order_grn cannot be null');
        }
        $this->container['order_grn'] = $order_grn;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \OpenAPI\Client\Model\CreateReturnRequestProduct[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \OpenAPI\Client\Model\CreateReturnRequestProduct[] $products products
     *
     * @return self
     */
    public function setProducts($products)
    {
        if (is_null($products)) {
            throw new \InvalidArgumentException('non-nullable products cannot be null');
        }
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets preferred_refund_method
     *
     * @return \OpenAPI\Client\Model\RmaRefundMethod
     */
    public function getPreferredRefundMethod()
    {
        return $this->container['preferred_refund_method'];
    }

    /**
     * Sets preferred_refund_method
     *
     * @param \OpenAPI\Client\Model\RmaRefundMethod $preferred_refund_method preferred_refund_method
     *
     * @return self
     */
    public function setPreferredRefundMethod($preferred_refund_method)
    {
        if (is_null($preferred_refund_method)) {
            throw new \InvalidArgumentException('non-nullable preferred_refund_method cannot be null');
        }
        $this->container['preferred_refund_method'] = $preferred_refund_method;

        return $this;
    }

    /**
     * Gets refund_shipping_cost
     *
     * @return bool|null
     */
    public function getRefundShippingCost()
    {
        return $this->container['refund_shipping_cost'];
    }

    /**
     * Sets refund_shipping_cost
     *
     * @param bool|null $refund_shipping_cost refund_shipping_cost
     *
     * @return self
     */
    public function setRefundShippingCost($refund_shipping_cost)
    {
        if (is_null($refund_shipping_cost)) {
            throw new \InvalidArgumentException('non-nullable refund_shipping_cost cannot be null');
        }
        $this->container['refund_shipping_cost'] = $refund_shipping_cost;

        return $this;
    }

    /**
     * Gets refund_payment_cost
     *
     * @return bool|null
     */
    public function getRefundPaymentCost()
    {
        return $this->container['refund_payment_cost'];
    }

    /**
     * Sets refund_payment_cost
     *
     * @param bool|null $refund_payment_cost refund_payment_cost
     *
     * @return self
     */
    public function setRefundPaymentCost($refund_payment_cost)
    {
        if (is_null($refund_payment_cost)) {
            throw new \InvalidArgumentException('non-nullable refund_payment_cost cannot be null');
        }
        $this->container['refund_payment_cost'] = $refund_payment_cost;

        return $this;
    }

    /**
     * Gets customer_info
     *
     * @return \OpenAPI\Client\Model\RmaCustomerInfo|null
     */
    public function getCustomerInfo()
    {
        return $this->container['customer_info'];
    }

    /**
     * Sets customer_info
     *
     * @param \OpenAPI\Client\Model\RmaCustomerInfo|null $customer_info customer_info
     *
     * @return self
     */
    public function setCustomerInfo($customer_info)
    {
        if (is_null($customer_info)) {
            throw new \InvalidArgumentException('non-nullable customer_info cannot be null');
        }
        $this->container['customer_info'] = $customer_info;

        return $this;
    }

    /**
     * Gets return_address
     *
     * @return \OpenAPI\Client\Model\RmaPostalAddress|null
     */
    public function getReturnAddress()
    {
        return $this->container['return_address'];
    }

    /**
     * Sets return_address
     *
     * @param \OpenAPI\Client\Model\RmaPostalAddress|null $return_address return_address
     *
     * @return self
     */
    public function setReturnAddress($return_address)
    {
        if (is_null($return_address)) {
            throw new \InvalidArgumentException('non-nullable return_address cannot be null');
        }
        $this->container['return_address'] = $return_address;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    public static function withAdditionalProperties(): bool
    {
        return self::$withAdditionalProperties;
    }


    public function setAdditionalProperty($name, $value)
    {
        throw new \InvalidArgumentException(
            sprintf(
                "This model cannot have additional properties"
            )
        );
    }

    public function getAdditionalProperty($name)
    {
        return $this->additionalProperties[$name];
    }

    public function hasAdditionalProperty($name): bool
    {
        return array_key_exists($name, $this->additionalProperties);
    }

    public function getAdditionalProperties()
    {
        return $this->additionalProperties;
    }
}


