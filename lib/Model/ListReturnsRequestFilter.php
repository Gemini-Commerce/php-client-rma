<?php
/**
 * ListReturnsRequestFilter
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RMA Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListReturnsRequestFilter Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListReturnsRequestFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static $withAdditionalProperties = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ListReturnsRequestFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'search_terms' => 'string[]',
        'return_ids' => 'string[]',
        'return_status' => 'string[]',
        'order_grns' => 'string[]',
        'order_numbers' => 'string[]',
        'order_item_grns' => 'string[]',
        'order_item_skus' => 'string[]',
        'customer_grns' => 'string[]',
        'customer_emails' => 'string[]',
        'created_at_start' => '\DateTime',
        'created_at_end' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'search_terms' => null,
        'return_ids' => null,
        'return_status' => null,
        'order_grns' => null,
        'order_numbers' => null,
        'order_item_grns' => null,
        'order_item_skus' => null,
        'customer_grns' => null,
        'customer_emails' => null,
        'created_at_start' => 'date-time',
        'created_at_end' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'search_terms' => false,
        'return_ids' => false,
        'return_status' => false,
        'order_grns' => false,
        'order_numbers' => false,
        'order_item_grns' => false,
        'order_item_skus' => false,
        'customer_grns' => false,
        'customer_emails' => false,
        'created_at_start' => false,
        'created_at_end' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'search_terms' => 'searchTerms',
        'return_ids' => 'returnIds',
        'return_status' => 'returnStatus',
        'order_grns' => 'orderGrns',
        'order_numbers' => 'orderNumbers',
        'order_item_grns' => 'orderItemGrns',
        'order_item_skus' => 'orderItemSkus',
        'customer_grns' => 'customerGrns',
        'customer_emails' => 'customerEmails',
        'created_at_start' => 'createdAtStart',
        'created_at_end' => 'createdAtEnd'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'search_terms' => 'setSearchTerms',
        'return_ids' => 'setReturnIds',
        'return_status' => 'setReturnStatus',
        'order_grns' => 'setOrderGrns',
        'order_numbers' => 'setOrderNumbers',
        'order_item_grns' => 'setOrderItemGrns',
        'order_item_skus' => 'setOrderItemSkus',
        'customer_grns' => 'setCustomerGrns',
        'customer_emails' => 'setCustomerEmails',
        'created_at_start' => 'setCreatedAtStart',
        'created_at_end' => 'setCreatedAtEnd'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'search_terms' => 'getSearchTerms',
        'return_ids' => 'getReturnIds',
        'return_status' => 'getReturnStatus',
        'order_grns' => 'getOrderGrns',
        'order_numbers' => 'getOrderNumbers',
        'order_item_grns' => 'getOrderItemGrns',
        'order_item_skus' => 'getOrderItemSkus',
        'customer_grns' => 'getCustomerGrns',
        'customer_emails' => 'getCustomerEmails',
        'created_at_start' => 'getCreatedAtStart',
        'created_at_end' => 'getCreatedAtEnd'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Associative array for storing additional properties
     *
     * @var mixed[]
     */
    protected $additionalProperties = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('search_terms', $data ?? [], null);
        $this->setIfExists('return_ids', $data ?? [], null);
        $this->setIfExists('return_status', $data ?? [], null);
        $this->setIfExists('order_grns', $data ?? [], null);
        $this->setIfExists('order_numbers', $data ?? [], null);
        $this->setIfExists('order_item_grns', $data ?? [], null);
        $this->setIfExists('order_item_skus', $data ?? [], null);
        $this->setIfExists('customer_grns', $data ?? [], null);
        $this->setIfExists('customer_emails', $data ?? [], null);
        $this->setIfExists('created_at_start', $data ?? [], null);
        $this->setIfExists('created_at_end', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets search_terms
     *
     * @return string[]|null
     */
    public function getSearchTerms()
    {
        return $this->container['search_terms'];
    }

    /**
     * Sets search_terms
     *
     * @param string[]|null $search_terms search_terms
     *
     * @return self
     */
    public function setSearchTerms($search_terms)
    {
        if (is_null($search_terms)) {
            throw new \InvalidArgumentException('non-nullable search_terms cannot be null');
        }
        $this->container['search_terms'] = $search_terms;

        return $this;
    }

    /**
     * Gets return_ids
     *
     * @return string[]|null
     */
    public function getReturnIds()
    {
        return $this->container['return_ids'];
    }

    /**
     * Sets return_ids
     *
     * @param string[]|null $return_ids return_ids
     *
     * @return self
     */
    public function setReturnIds($return_ids)
    {
        if (is_null($return_ids)) {
            throw new \InvalidArgumentException('non-nullable return_ids cannot be null');
        }
        $this->container['return_ids'] = $return_ids;

        return $this;
    }

    /**
     * Gets return_status
     *
     * @return string[]|null
     */
    public function getReturnStatus()
    {
        return $this->container['return_status'];
    }

    /**
     * Sets return_status
     *
     * @param string[]|null $return_status return_status
     *
     * @return self
     */
    public function setReturnStatus($return_status)
    {
        if (is_null($return_status)) {
            throw new \InvalidArgumentException('non-nullable return_status cannot be null');
        }
        $this->container['return_status'] = $return_status;

        return $this;
    }

    /**
     * Gets order_grns
     *
     * @return string[]|null
     */
    public function getOrderGrns()
    {
        return $this->container['order_grns'];
    }

    /**
     * Sets order_grns
     *
     * @param string[]|null $order_grns order_grns
     *
     * @return self
     */
    public function setOrderGrns($order_grns)
    {
        if (is_null($order_grns)) {
            throw new \InvalidArgumentException('non-nullable order_grns cannot be null');
        }
        $this->container['order_grns'] = $order_grns;

        return $this;
    }

    /**
     * Gets order_numbers
     *
     * @return string[]|null
     */
    public function getOrderNumbers()
    {
        return $this->container['order_numbers'];
    }

    /**
     * Sets order_numbers
     *
     * @param string[]|null $order_numbers order_numbers
     *
     * @return self
     */
    public function setOrderNumbers($order_numbers)
    {
        if (is_null($order_numbers)) {
            throw new \InvalidArgumentException('non-nullable order_numbers cannot be null');
        }
        $this->container['order_numbers'] = $order_numbers;

        return $this;
    }

    /**
     * Gets order_item_grns
     *
     * @return string[]|null
     */
    public function getOrderItemGrns()
    {
        return $this->container['order_item_grns'];
    }

    /**
     * Sets order_item_grns
     *
     * @param string[]|null $order_item_grns order_item_grns
     *
     * @return self
     */
    public function setOrderItemGrns($order_item_grns)
    {
        if (is_null($order_item_grns)) {
            throw new \InvalidArgumentException('non-nullable order_item_grns cannot be null');
        }
        $this->container['order_item_grns'] = $order_item_grns;

        return $this;
    }

    /**
     * Gets order_item_skus
     *
     * @return string[]|null
     */
    public function getOrderItemSkus()
    {
        return $this->container['order_item_skus'];
    }

    /**
     * Sets order_item_skus
     *
     * @param string[]|null $order_item_skus order_item_skus
     *
     * @return self
     */
    public function setOrderItemSkus($order_item_skus)
    {
        if (is_null($order_item_skus)) {
            throw new \InvalidArgumentException('non-nullable order_item_skus cannot be null');
        }
        $this->container['order_item_skus'] = $order_item_skus;

        return $this;
    }

    /**
     * Gets customer_grns
     *
     * @return string[]|null
     */
    public function getCustomerGrns()
    {
        return $this->container['customer_grns'];
    }

    /**
     * Sets customer_grns
     *
     * @param string[]|null $customer_grns customer_grns
     *
     * @return self
     */
    public function setCustomerGrns($customer_grns)
    {
        if (is_null($customer_grns)) {
            throw new \InvalidArgumentException('non-nullable customer_grns cannot be null');
        }
        $this->container['customer_grns'] = $customer_grns;

        return $this;
    }

    /**
     * Gets customer_emails
     *
     * @return string[]|null
     */
    public function getCustomerEmails()
    {
        return $this->container['customer_emails'];
    }

    /**
     * Sets customer_emails
     *
     * @param string[]|null $customer_emails customer_emails
     *
     * @return self
     */
    public function setCustomerEmails($customer_emails)
    {
        if (is_null($customer_emails)) {
            throw new \InvalidArgumentException('non-nullable customer_emails cannot be null');
        }
        $this->container['customer_emails'] = $customer_emails;

        return $this;
    }

    /**
     * Gets created_at_start
     *
     * @return \DateTime|null
     */
    public function getCreatedAtStart()
    {
        return $this->container['created_at_start'];
    }

    /**
     * Sets created_at_start
     *
     * @param \DateTime|null $created_at_start created_at_start
     *
     * @return self
     */
    public function setCreatedAtStart($created_at_start)
    {
        if (is_null($created_at_start)) {
            throw new \InvalidArgumentException('non-nullable created_at_start cannot be null');
        }
        $this->container['created_at_start'] = $created_at_start;

        return $this;
    }

    /**
     * Gets created_at_end
     *
     * @return \DateTime|null
     */
    public function getCreatedAtEnd()
    {
        return $this->container['created_at_end'];
    }

    /**
     * Sets created_at_end
     *
     * @param \DateTime|null $created_at_end created_at_end
     *
     * @return self
     */
    public function setCreatedAtEnd($created_at_end)
    {
        if (is_null($created_at_end)) {
            throw new \InvalidArgumentException('non-nullable created_at_end cannot be null');
        }
        $this->container['created_at_end'] = $created_at_end;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    public static function withAdditionalProperties(): bool
    {
        return self::$withAdditionalProperties;
    }


    public function setAdditionalProperty($name, $value)
    {
        throw new \InvalidArgumentException(
            sprintf(
                "This model cannot have additional properties"
            )
        );
    }

    public function getAdditionalProperty($name)
    {
        return $this->additionalProperties[$name];
    }

    public function hasAdditionalProperty($name): bool
    {
        return array_key_exists($name, $this->additionalProperties);
    }

    public function getAdditionalProperties()
    {
        return $this->additionalProperties;
    }
}


