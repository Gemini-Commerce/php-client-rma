<?php
/**
 * RmaReturnResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  GeminiCommerce\Rma
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * RMA Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GeminiCommerce\Rma\Model;

use \ArrayAccess;
use \GeminiCommerce\Rma\ObjectSerializer;

/**
 * RmaReturnResponse Class Doc Comment
 *
 * @category Class
 * @package  GeminiCommerce\Rma
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RmaReturnResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'rmaReturnResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'grn' => 'string',
        'order_grn' => 'string',
        'status' => 'string',
        'products' => '\GeminiCommerce\Rma\Model\RmaReturnProduct[]',
        'preferred_refund_method' => '\GeminiCommerce\Rma\Model\RmaRefundMethod',
        'refund_shipping_cost' => 'bool',
        'refund_payment_cost' => 'bool',
        'customer_info' => '\GeminiCommerce\Rma\Model\RmaCustomerInfo',
        'return_address' => '\GeminiCommerce\Rma\Model\RmaPostalAddress',
        'note' => 'string',
        'history' => '\GeminiCommerce\Rma\Model\RmaReturnHistory[]',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'order_data' => '\GeminiCommerce\Rma\Model\RmaOrderData'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'grn' => null,
        'order_grn' => null,
        'status' => null,
        'products' => null,
        'preferred_refund_method' => null,
        'refund_shipping_cost' => null,
        'refund_payment_cost' => null,
        'customer_info' => null,
        'return_address' => null,
        'note' => null,
        'history' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'order_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'grn' => false,
        'order_grn' => false,
        'status' => false,
        'products' => false,
        'preferred_refund_method' => false,
        'refund_shipping_cost' => false,
        'refund_payment_cost' => false,
        'customer_info' => false,
        'return_address' => false,
        'note' => false,
        'history' => false,
        'created_at' => false,
        'updated_at' => false,
        'order_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'grn' => 'grn',
        'order_grn' => 'orderGrn',
        'status' => 'status',
        'products' => 'products',
        'preferred_refund_method' => 'preferredRefundMethod',
        'refund_shipping_cost' => 'refundShippingCost',
        'refund_payment_cost' => 'refundPaymentCost',
        'customer_info' => 'customerInfo',
        'return_address' => 'returnAddress',
        'note' => 'note',
        'history' => 'history',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'order_data' => 'orderData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'grn' => 'setGrn',
        'order_grn' => 'setOrderGrn',
        'status' => 'setStatus',
        'products' => 'setProducts',
        'preferred_refund_method' => 'setPreferredRefundMethod',
        'refund_shipping_cost' => 'setRefundShippingCost',
        'refund_payment_cost' => 'setRefundPaymentCost',
        'customer_info' => 'setCustomerInfo',
        'return_address' => 'setReturnAddress',
        'note' => 'setNote',
        'history' => 'setHistory',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'order_data' => 'setOrderData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'grn' => 'getGrn',
        'order_grn' => 'getOrderGrn',
        'status' => 'getStatus',
        'products' => 'getProducts',
        'preferred_refund_method' => 'getPreferredRefundMethod',
        'refund_shipping_cost' => 'getRefundShippingCost',
        'refund_payment_cost' => 'getRefundPaymentCost',
        'customer_info' => 'getCustomerInfo',
        'return_address' => 'getReturnAddress',
        'note' => 'getNote',
        'history' => 'getHistory',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'order_data' => 'getOrderData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('grn', $data ?? [], null);
        $this->setIfExists('order_grn', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('products', $data ?? [], null);
        $this->setIfExists('preferred_refund_method', $data ?? [], null);
        $this->setIfExists('refund_shipping_cost', $data ?? [], null);
        $this->setIfExists('refund_payment_cost', $data ?? [], null);
        $this->setIfExists('customer_info', $data ?? [], null);
        $this->setIfExists('return_address', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('history', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('order_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets grn
     *
     * @return string|null
     */
    public function getGrn()
    {
        return $this->container['grn'];
    }

    /**
     * Sets grn
     *
     * @param string|null $grn grn
     *
     * @return self
     */
    public function setGrn($grn)
    {
        if (is_null($grn)) {
            throw new \InvalidArgumentException('non-nullable grn cannot be null');
        }
        $this->container['grn'] = $grn;

        return $this;
    }

    /**
     * Gets order_grn
     *
     * @return string|null
     */
    public function getOrderGrn()
    {
        return $this->container['order_grn'];
    }

    /**
     * Sets order_grn
     *
     * @param string|null $order_grn order_grn
     *
     * @return self
     */
    public function setOrderGrn($order_grn)
    {
        if (is_null($order_grn)) {
            throw new \InvalidArgumentException('non-nullable order_grn cannot be null');
        }
        $this->container['order_grn'] = $order_grn;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \GeminiCommerce\Rma\Model\RmaReturnProduct[]|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \GeminiCommerce\Rma\Model\RmaReturnProduct[]|null $products products
     *
     * @return self
     */
    public function setProducts($products)
    {
        if (is_null($products)) {
            throw new \InvalidArgumentException('non-nullable products cannot be null');
        }
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets preferred_refund_method
     *
     * @return \GeminiCommerce\Rma\Model\RmaRefundMethod|null
     */
    public function getPreferredRefundMethod()
    {
        return $this->container['preferred_refund_method'];
    }

    /**
     * Sets preferred_refund_method
     *
     * @param \GeminiCommerce\Rma\Model\RmaRefundMethod|null $preferred_refund_method preferred_refund_method
     *
     * @return self
     */
    public function setPreferredRefundMethod($preferred_refund_method)
    {
        if (is_null($preferred_refund_method)) {
            throw new \InvalidArgumentException('non-nullable preferred_refund_method cannot be null');
        }
        $this->container['preferred_refund_method'] = $preferred_refund_method;

        return $this;
    }

    /**
     * Gets refund_shipping_cost
     *
     * @return bool|null
     */
    public function getRefundShippingCost()
    {
        return $this->container['refund_shipping_cost'];
    }

    /**
     * Sets refund_shipping_cost
     *
     * @param bool|null $refund_shipping_cost refund_shipping_cost
     *
     * @return self
     */
    public function setRefundShippingCost($refund_shipping_cost)
    {
        if (is_null($refund_shipping_cost)) {
            throw new \InvalidArgumentException('non-nullable refund_shipping_cost cannot be null');
        }
        $this->container['refund_shipping_cost'] = $refund_shipping_cost;

        return $this;
    }

    /**
     * Gets refund_payment_cost
     *
     * @return bool|null
     */
    public function getRefundPaymentCost()
    {
        return $this->container['refund_payment_cost'];
    }

    /**
     * Sets refund_payment_cost
     *
     * @param bool|null $refund_payment_cost refund_payment_cost
     *
     * @return self
     */
    public function setRefundPaymentCost($refund_payment_cost)
    {
        if (is_null($refund_payment_cost)) {
            throw new \InvalidArgumentException('non-nullable refund_payment_cost cannot be null');
        }
        $this->container['refund_payment_cost'] = $refund_payment_cost;

        return $this;
    }

    /**
     * Gets customer_info
     *
     * @return \GeminiCommerce\Rma\Model\RmaCustomerInfo|null
     */
    public function getCustomerInfo()
    {
        return $this->container['customer_info'];
    }

    /**
     * Sets customer_info
     *
     * @param \GeminiCommerce\Rma\Model\RmaCustomerInfo|null $customer_info customer_info
     *
     * @return self
     */
    public function setCustomerInfo($customer_info)
    {
        if (is_null($customer_info)) {
            throw new \InvalidArgumentException('non-nullable customer_info cannot be null');
        }
        $this->container['customer_info'] = $customer_info;

        return $this;
    }

    /**
     * Gets return_address
     *
     * @return \GeminiCommerce\Rma\Model\RmaPostalAddress|null
     */
    public function getReturnAddress()
    {
        return $this->container['return_address'];
    }

    /**
     * Sets return_address
     *
     * @param \GeminiCommerce\Rma\Model\RmaPostalAddress|null $return_address return_address
     *
     * @return self
     */
    public function setReturnAddress($return_address)
    {
        if (is_null($return_address)) {
            throw new \InvalidArgumentException('non-nullable return_address cannot be null');
        }
        $this->container['return_address'] = $return_address;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \GeminiCommerce\Rma\Model\RmaReturnHistory[]|null
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \GeminiCommerce\Rma\Model\RmaReturnHistory[]|null $history history
     *
     * @return self
     */
    public function setHistory($history)
    {
        if (is_null($history)) {
            throw new \InvalidArgumentException('non-nullable history cannot be null');
        }
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets order_data
     *
     * @return \GeminiCommerce\Rma\Model\RmaOrderData|null
     */
    public function getOrderData()
    {
        return $this->container['order_data'];
    }

    /**
     * Sets order_data
     *
     * @param \GeminiCommerce\Rma\Model\RmaOrderData|null $order_data order_data
     *
     * @return self
     */
    public function setOrderData($order_data)
    {
        if (is_null($order_data)) {
            throw new \InvalidArgumentException('non-nullable order_data cannot be null');
        }
        $this->container['order_data'] = $order_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


